import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.preprocessing import MinMaxScaler
from data_fetcher import fetch_coin_data
from datetime import datetime, timedelta
import os
import time
import logging
import requests
from config import (
    ETHERSCAN_API_KEY, BSCSCAN_API_KEY, POLYGONSCAN_API_KEY,
    SNOWSCAN_API_KEY, ARBISCAN_API_KEY, OPTIMISMSCAN_API_KEY,
    DEEPSEEK_API_KEY, DEXSCREENER_API, DEFILLAMA_API
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('analysis.log')
    ]
)
logger = logging.getLogger(__name__)


class EfficientLSTMModel(nn.Module):
    def __init__(self, input_size=1, hidden_size=64, output_size=1, num_layers=2):
        super().__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
        self.linear = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        out, _ = self.lstm(x)
        out = out[:, -1, :]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        out = self.linear(out)
        return out


def create_sequences(data, seq_length):
    xs, ys = [], []
    for i in range(len(data) - seq_length):
        xs.append(data[i:i + seq_length])
        ys.append(data[i + seq_length])
    return np.array(xs), np.array(ys)


def get_ai_analysis(prompt):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ DeepSeek"""
    return "–ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ DeepSeek API."


def perform_full_analysis(coin):
    try:
        start_time = time.time()
        logger.info(f"üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {coin}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko...")
        df = fetch_coin_data(coin)

        if df.empty:
            raise ValueError("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç CoinGecko API")

        if len(df) < 100:
            raise ValueError(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: —Ç–æ–ª—å–∫–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")

        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_data = scaler.fit_transform(df[['close']])

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        seq_length = 30  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        X, y = create_sequences(scaled_data, seq_length)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        train_size = int(len(X) * 0.8)
        X_train, X_test = X[:train_size], X[train_size:]
        y_train, y_test = y[:train_size], y[train_size:]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        logger.info(f"‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–µ–Ω–∑–æ—Ä—ã
        X_train = torch.tensor(X_train, dtype=torch.float32).to(device)
        y_train = torch.tensor(y_train, dtype=torch.float32).to(device)
        X_test = torch.tensor(X_test, dtype=torch.float32).to(device)
        y_test = torch.tensor(y_test, dtype=torch.float32).to(device)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        model = EfficientLSTMModel().to(device)
        criterion = nn.MSELoss()
        optimizer = optim.Adam(model.parameters(), lr=0.01)  # –£–≤–µ–ª–∏—á–µ–Ω learning rate

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        epochs = 50  # –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
        batch_size = 64
        logger.info(f"üéì –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è: {epochs} —ç–ø–æ—Ö, —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ {batch_size}")

        for epoch in range(epochs):
            model.train()
            epoch_loss = 0
            for i in range(0, len(X_train), batch_size):
                batch_x = X_train[i:i + batch_size]
                batch_y = y_train[i:i + batch_size]

                optimizer.zero_grad()
                outputs = model(batch_x)
                loss = criterion(outputs, batch_y)
                loss.backward()
                optimizer.step()
                epoch_loss += loss.item()

            if (epoch + 1) % 10 == 0:
                logger.info(f"‚úÖ –≠–ø–æ—Ö–∞ {epoch + 1}/{epochs} | Loss: {epoch_loss:.6f}")

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        model.eval()
        with torch.no_grad():
            last_sequence = scaled_data[-seq_length:]
            last_tensor = torch.tensor(last_sequence, dtype=torch.float32).unsqueeze(0).to(device)
            next_day_pred = model(last_tensor).cpu().numpy()
            next_day_price = scaler.inverse_transform(next_day_pred)[0][0]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(12, 8))
        plt.plot(df.index, df['close'], 'b-', label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')

        # –ü—Ä–æ–≥–Ω–æ–∑
        next_day_date = datetime.now() + timedelta(days=1)
        plt.plot(next_day_date, next_day_price, 'ro', markersize=8, label=f'–ü—Ä–æ–≥–Ω–æ–∑: ${next_day_price:.2f}')

        plt.title(f'–ê–Ω–∞–ª–∏–∑ {coin.upper()}\n–ü—Ä–æ–≥–Ω–æ–∑: ${next_day_price:.2f}', fontsize=14)
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–¶–µ–Ω–∞ (USD)')
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend()
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        os.makedirs('charts', exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        chart_path = f'charts/{coin}_{timestamp}.png'
        plt.savefig(chart_path, dpi=120)
        plt.close()

        logger.info(f"‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time.time() - start_time:.1f} —Å–µ–∫.")
        return chart_path

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ")
        raise